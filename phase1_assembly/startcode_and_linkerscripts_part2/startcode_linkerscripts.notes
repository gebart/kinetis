Freescaled Kinetis K60 / ARM Cortex-M4 Project
Rob Laswick
May 15 2012


START CODE AND LINKER SCRIPT NOTES


START CODE

    Typical Responsibilities of startcode:

    - Perform a subsystem reset (to support a software reset).
      "Good" startcode is usually aware of whether it's a warm or cold
      start, and only performs a subsystem reset on cold starts.
    - Disable the Watchdog.
    - Disable Interrupts.
    - Define the vector table.
    - Provide "weak" default vector/exception handlers.
    - Provide a FLASH configuration field (if applicable (kinetis/ppc)).
    - Set the stack pointer(s).
    - Watermark the stack(s).

    - If code generated by a higher level language will be executed,
      the environment for that language must be setup.
      For example, if C code will be executed at some point the startcode
      must also prepare the "C Runtime Environment" (re: crt0).
      This consists of copy the 3 main sections out of FLASH into RAM.

      Note: In typical microcontroller applications, code is run out of FLASH
            so only the .data and .bss sections are required to be relocated.

      SECTIONS

      C compilers generate the following "primary" sections:

      .text: executable code (instructions) and read only constants.

      .data: Initialized global and static variables.

      .bss: Uninitialized global and static variables.

      Note: The .bss section is contains no content, it's really just a
            size/length of memory that the startcode is expected to zero out
            in RAM.

      The start and end addresses for each section are exported by the linker
      so the startcode can find and relocate them as needed.

    - Zero out or watermark the heap.
    - Call main().

    - For (non-microcontroller) systems where the external memory interface
      has not been initialized, the startcode must bring up the memory
      subsystem(s) before (obviously) before any data relocation can occur.

    - MPU / MMU initialization (if applicable).
    - Memory test (optional).
    - Epilogue processing (returning from main()) (if applicable).


LINKER SCRIPTS

    Linker scripts have 2 main responsibilities:

        1. Define the memory map (Types of memory, starting addr, and size).
        2. Define the location of each "section".

          "Sections" are defined groups of information.

    As mentioned above, the 3 primary sections to support are:
    ".text", ".data", and ".bss".

    It's possible (and often advantageous) to define and use custom (sub)
    sections.  This allows you to place specific pieces of code is specific
    locations in memory (i.e. high speed memory, context grouping (module
    headers, etc.)).

    The linker scripts also provides and exports the start and end address
    of each "section", as well as the heap, and stack.

    The linker script also:

        - Defines and exports the start and end address of each section.
        - Defines and exports the start and end address of the heap.
        - Defines and exports the start and end address of the stack.
        - Defines and exports the initial stack pointer address(es).

    Typically in microcontroller based systems, the .text section is NOT
    relocated and code is executed out of FLASH.  The .data section is
    relocated to the beginning of RAM, followed by the .bss section.  The
    heap usually goes next (as it allocates "up"), and the main stack pointer is
    set at the end of RAM (as it typically grows "down").



